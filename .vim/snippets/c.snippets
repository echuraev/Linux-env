## Main
snippet maina "Main with argc and argv"
	int main(int argc, const char *argv[])
	{
		${0}
		return 0;
	}
snippet main "Main without args"
	int main()
	{
		${0}
		return 0;
	}
##
## Preprocessor
snippet inc "Global include"
	#include <${1:stdio}.h>
snippet Inc "local include"
	#include "${1:`Filename("$1.h")`}"
snippet ndef "ifndef...define...endif"
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif /* ifndef $1 */
snippet def "#define"
	#define
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${0:${VISUAL}}
	#endif
snippet once "Header include guard"
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${0}

	#endif /* end of include guard: $1 */
snippet nocxx "Disable C++ name mangling in C headers"
	#ifdef __cplusplus
	extern "C" {
	#endif

	${0}

	#ifdef __cplusplus
	} /* extern "C" */
	#endif
##
## Control Statements
snippet if "if statement"
	if (${1:true}) {
		${0:${VISUAL}}
	}
snippet ife "if else statements"
	if (${1:true}) {
		${2:${VISUAL}}
	} else {
		${0}
	}
snippet el "else statement"
	else {
		${0:${VISUAL}}
	}
snippet elif "else if statement"
	else if (${1:true}) {
		${0:${VISUAL}}
	}
snippet ifi "one line if"
	if (${1:true}) ${0};
snippet t "ternary statement"
	${1:/* condition */} ? ${2:a} : ${3:b}
snippet switch "switch statement"
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
snippet switchndef "switch without default"
	switch (${1:/* variable */}) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
# case
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
snippet ret
	return ${0};
##
## Loops
snippet for "for loop"
	for (${1:type} ${2:i} = ${3:0}; $2 < ${4:count}; $2${5:++}) {
		${6}
	}
snippet wh "while loop"
	while (${1:/* condition */}) {
		${0:${VISUAL}}
	}
snippet do "do... while loop"
	do {
		${0:${VISUAL}}
	} while (${1:/* condition */});
##
## Functions
snippet fun "function definition"
	${1:void} ${2:function_name}(${3})
	{
		${4}
	}
snippet fun0 "function definition with zero parameters"
	${1:void} ${2:function_name}()
	{
		${3}
	}
snippet dfun0 "function definition with Doxygen documentation"
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \return ${3:Return parameter description}
	 */
	${4:void} ${5:function_name}()
	{
		${6}
	}
snippet fun1 "function definition with one parameter"
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter})
	{
		${5}
	}
snippet dfun1 "function definition with one parameter with Doxygen documentation"
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \return ${5:Return parameter description}
	 */
	${6:void} ${7:function_name}(${8:Type} ${3:Parameter})
	{
		${9}
	}
snippet fun2 "function definition with two parameters"
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter})
	{
		${7}
	}
snippet dfun2 "function definition with two parameters with Doxygen documentation"
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \param $5 ${6:Parameter description}
	 * \return ${7:Return parameter description}
	 */
	${8:void} ${9:function_name}(${10:Type} ${3:Parameter}, ${11:Type} ${5:Parameter})
	{
		${12}
	}
snippet fun3 "function definition with three parameters"
	${1:void} ${2:function_name}(${3:Type} ${4:Parameter}, ${5:Type} ${6:Parameter}, ${7:Type} ${8:Parameter})
	{
		${9}
	}
snippet dfun3 "function definition with three parameters with Doxygen documentation"
	/*! \brief ${1:Brief function description here}
	 *
	 *  ${2:Detailed description of the function}
	 *
	 * \param $3 ${4:Parameter description}
	 * \param $5 ${6:Parameter description}
	 * \param $7 ${8:Parameter description}
	 * \return ${9:Return parameter description}
	 */
	${10:void} ${11:function_name}(${12:Type} ${3:Parameter}, ${13:Type} ${5:Parameter}, ${14:Type} ${7:Parameter})
	{
		${15}
	}
snippet fund "function declaration"
	${1:void} ${2:function_name}(${3});
##
## Types
snippet td "typedef"
	typedef ${1:int} ${2:MyCustomType};
snippet st "struct"
	/*! \struct $1
	 *  \brief ${3:Brief struct description}
	 *
	 *  ${4:Detailed description}
	 */
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:Data} /*!< ${4:Description} */
	}${5: /* optional variable list */};
snippet tds "typedef struct"
	/*! \struct $2
	 *  \brief ${5:Brief struct description}
	 *
	 *  ${6:Detailed description}
	 */
	typedef struct ${2:_$1 }{
		m_${3:Data} /*!< ${4:Description} */
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};

snippet enum
	/*! \enum $1
	 *
	 *  ${2:Detailed description}
	 */
	enum ${1:name} { ${0} };
snippet tde "typedef enum"
	/*! \enum $2
	 *
	 *  ${4:Detailed description}
	 */
	typedef enum {
		${1:Data} /*!< ${3:Description} */
	} ${2:foo};
