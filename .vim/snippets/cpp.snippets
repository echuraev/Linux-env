extends c

## Iteration
snippet fore "foreach"
	for (${1:auto} ${2:i} : ${3:container}) {
		${4}
	}
snippet iter "For iterator"
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

snippet itera "For auto iterator"
	for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
		${3:std::cout << *$1 << std::endl;}
	}
##
##
## Preprocessor
snippet incc "#include <...>"
	#include <${1:iostream}>
##
## STL Collections
snippet array "std::array"
	std::array<${1:T}, ${2:N}> ${3};
snippet vector "std::vector"
	std::vector<${1:T}> ${2};
snippet deque "std::deque"
	std::deque<${1:T}> ${2};
snippet flist "std::forward_list"
	std::forward_list<${1:T}> ${2};
snippet list "std::list"
	std::list<${1:T}> ${2};
snippet set "std::set"
	std::set<${1:T}> ${2};
snippet map "std::map"
	std::map<${1:Key}, ${2:T}> ${3};
snippet mset "std::multiset"
	std::multiset<${1:T}> ${2};
snippet mmap "std::multimap"
	std::multimap<${1:Key}, ${2:T}> ${3};
snippet uset "std::unordered_set"
	std::unordered_set<${1:T}> ${2};
snippet umap "std::unordered_map"
	std::unordered_map<${1:Key}, ${2:T}> ${3};
snippet umset "std::unordered_multiset"
	std::unordered_multiset<${1:T}> ${2};
snippet ummap "std::unordered_multimap"
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
snippet stack "std::stack"
	std::stack<${1:T}> ${2};
snippet queue "std::queue"
	std::queue<${1:T}> ${2};
snippet pqueue "std::priority_queue"
	std::priority_queue<${1:T}> ${2};
##
## STL smart pointers
snippet msp "std::shared_ptr = make_shared"
	std::shared_ptr<${1:T}> ${2} = std::make_shared<$1>(${3});
snippet amsp "auto = make_shared"
	auto ${1} = std::make_shared<${2:T}>(${3});
snippet mup "std::unique_ptr = make_unique"
	std::unique_ptr<${1:T}> ${2} = std::make_unique<$1>(${3});
snippet amup "auto = make_unique"
	auto ${1} = std::make_unique<${2:T}>(${3});
##
## Access Modifiers
snippet pri "private"
	private
snippet pro "protected"
	protected
snippet pub "public"
	public
snippet fr "friend"
	friend
snippet mu "mutable"
	mutable
##
## Class
snippet cl "class"
	/*! \class $1
	 *  \brief ${3:Brief class description}
	 *
	 *  ${4:Detailed description}
	 */
	class ${1:`Filename('$1', 'name')`} {
	public:
		$1(${2});
		virtual ~$1();

	protected:
		m_${5}; /*!< ${6:Member description} */
	};
snippet mfun "member function implementation"
	${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
snippet dmfun0 "member function implementation without parameters"
	/*! \brief ${4:Brief function description here}
	 *
	 *  ${5:Detailed description}
	 *
	 * \return ${6:Return parameter description}
	 */
	${3:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}() {
		${0}
	}
snippet dmfun1 "member function implementation with one parameter"
	/*! \brief ${6:Brief function description here}
	 *
	 *  ${7:Detailed description}
	 *
	 * \param $4 ${8:Parameter description}
	 * \return ${9:Return parameter description}
	 */
	${5:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter}) {
		${0}
	}
snippet dmfun2 "member function implementation with two parameter"
	/*! \brief ${8:Brief function description here}
	 *
	 *  ${9:Detailed description}
	 *
	 * \param $4 ${10:Parameter description}
	 * \param $6 ${11:Parameter description}
	 * \return ${12:Return parameter description}
	 */
	${7:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3:Type} ${4:Parameter},${5:Type} ${6:Parameter}) {
		${0}
	}
snippet ns "namespace"
	namespace ${1:`Filename('', 'my')`} {
		${0}
	}  // namespace $1
snippet ans "anonimous namespace"
	namespace {
		${0}
	}
##
## Input/Output
snippet cout "std::cout"
	std::cout << ${1} << std::endl;
snippet cin "std::cin"
	std::cin >> ${1};
##
## Casts
snippet sca "static_cast"
	static_cast<${1:unsigned}>(${2:expr})${3}
snippet dca "dynamic_cast"
	dynamic_cast<${1:unsigned}>(${2:expr})${3}
snippet rca "reinterpret_cast"
	reinterpret_cast<${1:unsigned}>(${2:expr})${3}
snippet cca "const_cast"
	const_cast<${1:unsigned}>(${2:expr})${3}
## Lambdas
snippet ld "lamda (one line)"
	[${1}](${2}){${3}};
snippet lld "lambda (multi-line)"
	[${1}](${2}){
		${3}
	};
snippet try "snippets exception"
	try {

	} catch(${1}) {

	}
snippet af "auto function"
	auto ${1:name}(${2}) -> ${3:void}
	{
		${0}
	};
