# If you wish use zsh and don't have root access. Then add the following lines in bashrc
#
# if type "zsh" > /dev/null; then
#     exec zsh
# else
#     [ -f $HOME/.bashrc.global ] && source $HOME/.bashrc.global
#     [ -f $HOME/.bashrc.local ] && source $HOME/.bashrc.local
#     [ -f ~/.fzf.bash ] && source ~/.fzf.bash
# fi

export LANG="en_US.UTF-8"

export SVN_EDITOR=/usr/bin/vim

export TERM=xterm-256color

# Aliases {{{ #
if [[ `uname` != 'Darwin' ]]; then
    alias ls='ls --color=always'
else
    alias ls='ls -G'
fi
alias grep='grep --color'
alias emacs='emacs -nw'
alias gitv='vim "$(git rev-parse --show-toplevel)"/.git/index -c "Gitv" -c "tabonly"'
alias google-chrome='google-chrome --proxy-auto-detect'
alias whatsapp='google-chrome --app=https://web.whatsapp.com/' #'/opt/google/chrome/google-chrome --app=https://web.whatsapp.com/'
#alias vim='vim --startuptime vim.log'
# }}} Aliases #
# Setup environment {{{ #
LOCAL_BIN=${HOME}/.bin/
mkdir -p $LOCAL_BIN
export PATH=$LOCAL_BIN:$PATH

export ACK_BIN=$LOCAL_BIN/ack
if [ ! -f $ACK_BIN ]; then
    # Install ack
    echo "Install ack"
    curl https://beyondgrep.com/ack-2.18-single-file > $ACK_BIN && chmod 0755 $ACK_BIN
fi

export PT_BIN=$LOCAL_BIN/pt
if [ ! -f $PT_BIN ]; then
    # Install pt
    echo "Install pt"
    export pt_version='v2.1.5'
    if [[ `uname` != 'Darwin' ]]; then
        export pt_archive_name='pt_linux_amd64'
        wget -O /tmp/$pt_archive_name.tar.gz https://github.com/monochromegane/the_platinum_searcher/releases/download/$pt_version/$pt_archive_name.tar.gz
        tar xf /tmp/$pt_archive_name.tar.gz -C /tmp
    else
        export pt_archive_name='pt_darwin_amd64'
        wget -O /tmp/$pt_archive_name.zip https://github.com/monochromegane/the_platinum_searcher/releases/download/$pt_version/$pt_archive_name.zip
        unzip /tmp/$pt_archive_name.zip -d /tmp
    fi
    cp -f /tmp/$pt_archive_name/pt $PT_BIN
fi

export RG_BIN=$LOCAL_BIN/rg
if [ ! -f $RG_BIN ]; then
    # Install rg
    echo "Install rg"
    export rg_version='0.5.2'
    if [[ `uname` != 'Darwin' ]]; then
        export rg_archive_name='ripgrep-0.5.2-x86_64-unknown-linux-musl'
    else
        export rg_archive_name='ripgrep-0.5.2-x86_64-apple-darwin'
    fi
    wget -O /tmp/$rg_archive_name.tar.gz https://github.com/BurntSushi/ripgrep/releases/download/$rg_version/$rg_archive_name.tar.gz
    tar xf /tmp/$rg_archive_name.tar.gz -C /tmp
    cp -f /tmp/$rg_archive_name/rg $RG_BIN
fi
# }}} Setup environment #
# Common functions {{{ #
weather() {
    # See help here: http://wttr.in/:help
    if [ -z "$1" ]; then
        curl "wttr.in/nizhny_novgorod?m&M"
    else
        curl "wttr.in/$1?m&M"
    fi
}

weather_today() {
    if [ -z "$1" ]; then
        curl "wttr.in/nizhny_novgorod?m&M&0"
    else
        curl "wttr.in/$1?m&M&0"
    fi
}
# }}} Common functions #
# FZF configurations {{{ #

# FZF search program. Get config from here: https://medium.com/@crashybang/supercharge-vim-with-fzf-and-ripgrep-d4661fc853d2
# --files: List files that would be searched but do not search
# --no-ignore: Do not respect .gitignore, etc...
# --hidden: Search hidden files and folders
# --follow: Follow symlinks
# --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
export FZF_DEFAULT_COMMAND='rg --files --no-ignore --hidden --follow --glob "!.git/*"'

##########################################################################
### FZF CONFIGS
##########################################################################
# fe [FUZZY PATTERN] - Open the selected file with the default editor
#   - Bypass fuzzy finder if there's only one match (--select-1)
#   - Exit if there's no match (--exit-0)
fe() {
  local files
  IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
  [[ -n "$files" ]] && ${EDITOR:-vim} "${files[@]}"
}

# fcd - including hidden directories
fcd() {
  local dir
  local file
  file=$(locate $(pwd) | fzf -e -q "$*")
  if [ ! -d "$file" ]; then
    file=$(dirname "$file")
  fi
  cd "$file"
}

# fcdh - cd from home
fcdh() {
  local dir
  local file
  file=$(locate ~ | fzf -e -q "$*")
  if [ ! -d "$file" ]; then
    file=$(dirname "$file")
  fi
  cd "$file"
}

# fcdr - cd to directory from root
fcdr() {
  local dir
  local file
  file=$(locate / | fzf -e -q "$*")
  if [ ! -d "$file" ]; then
    file=$(dirname "$file")
  fi
  cd "$file"
}

# fk - kill process
fk() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

# gcol - checkout git branch (locals)
gcol() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# gcor - checkout git branch (including remote branches)
gcor() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# gcort - checkout remote git branch with track option (including remote branches)
gcort() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git checkout --track $(echo "$branch" | sed "s/.* //")
}

# gcot - checkout git branch/tag
gcot() {
  local tags branches target
  tags=$(
    git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}') || return
  branches=$(
    git branch --all | grep -v HEAD             |
    sed "s/.* //"    | sed "s#remotes/[^/]*/##" |
    sort -u          | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}') || return
  target=$(
    (echo "$tags"; echo "$branches") |
    fzf-tmux -- --no-hscroll --ansi +m -d "\t" -n 2) || return
  git checkout $(echo "$target" | awk '{print $2}')
}

# gcoc - checkout git commit
gcoc() {
  local commits commit
  commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
  commit=$(echo "$commits" | fzf --tac +s +m -e) &&
  git checkout $(echo "$commit" | sed "s/ .*//")
}

# gdlb - delete local branch
gdlb() {
  local branches branch
  branches=$(git branch -vv) &&
  branch=$(echo "$branches" | fzf +m) &&
  git branch -D $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
}

# gdrb - delete remote branch
gdrb() {
  local branches branch
  branches=$(git branch --all | grep -v HEAD) &&
  branch=$(echo "$branches" |
           fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
  git push origin --delete $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}

# gshow - git commit browser
gshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# tm - connect to tmux session
tm() {
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
    tmux attach-session -t "$session" || echo "No tmux sessions"
}
# }}} FZF configurations #
# Autorun {{{ #
#if type "screenfetch" > /dev/null ; then
#    screenfetch -E # -E option will suppress errors
#fi
weather_today
# }}} Autorun #

